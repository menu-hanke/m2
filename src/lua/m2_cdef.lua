-- Autogenerated file - don't touch
local ffi = require 'ffi'
ffi.cdef [[
       
enum type {
 T_F32 = 1,
 T_F64 = 2,
 T_I8 = 3,
 T_I16 = 4,
 T_I32 = 5,
 T_I64 = 6,
 T_B8 = 7,
 T_B16 = 8,
 T_B32 = 9,
 T_B64 = 10,
};
enum ptype {
 T_REAL = 1,
 T_INT = 2,
 T_BIT = 3
};
union pvalue {
 double r;
 int64_t i;
 uint64_t b;
 void *p;
};
struct type_def {
 const char *name;
 size_t size;
};
struct bitenum_def {
 const char *name;
 uint64_t bit_mask;
 const char **value_names;
};
struct var_def {
 const char *name;
 enum type type;
 union {
  struct bitenum_def *bitenum_def;
 };
};
const struct type_def *get_typedef(enum type type);
size_t get_enum_size(uint64_t bit_mask);
enum type get_enum_type(struct bitenum_def *ed);
enum ptype get_ptype(enum type type);
int get_enum_bit(uint64_t bit);
uint64_t get_bit_enum(int bit);
       
enum fhk_ctype {
 FHK_RIVAL,
 FHK_IIVAL,
 FHK_BITSET
};
struct fhk_rival {
 double min;
 double max;
};
struct fhk_iival {
 int64_t min;
 int64_t max;
};
struct fhk_cst {
 enum fhk_ctype type;
 union {
  struct fhk_rival rival;
  struct fhk_iival iival;
  uint64_t setmask;
 };
};
struct fhk_space {
 struct fhk_cst cst;
};
enum {
 FHK_COST_OUT = 0,
 FHK_COST_IN = 1
};
struct fhk_check {
 struct fhk_var *var;
 struct fhk_cst cst;
 double costs[2];
};
struct fhk_mmark {
 double min_cost, max_cost;
};
struct fhk_vmark {
 union {
  struct {
   union pvalue value;
   struct fhk_model *model;
   double min_cost, max_cost;
  };
  struct {
   struct fhk_space space;
   unsigned limit_space : 1;
   unsigned given : 1;
  };
 };
};
struct fhk_model {
 int idx;
 double k, c;
 size_t n_check;
 struct fhk_check *checks;
 size_t n_param;
 struct fhk_var **params;
 unsigned may_fail : 1;
 struct fhk_mmark mark;
 void *udata;
};
struct fhk_var {
 int idx;
 size_t n_mod;
 struct fhk_model **models;
 unsigned is_virtual : 1;
 struct fhk_vmark mark;
 void *udata;
};
struct fhk_mbmap {
 unsigned skip : 1;
 unsigned has_bound : 1;
 unsigned chain_selected : 1;
} __attribute__((packed));
struct fhk_vbmap {
 unsigned given : 1;
 unsigned solve : 1;
 unsigned solving : 1;
 unsigned chain_selected : 1;
 unsigned has_value : 1;
 unsigned has_bound : 1;
} __attribute__((packed));
enum {
 FHK_RESET_GIVEN = 0x1,
 FHK_RESET_SOLVE = 0x2,
 FHK_RESET_ALL = FHK_RESET_GIVEN | FHK_RESET_SOLVE
};
enum {
 FHK_OK = 0,
 FHK_MODEL_FAILED = 1,
 FHK_RESOLVE_FAILED = 2,
 FHK_CYCLE = 3,
 FHK_REQUIRED_UNSOLVABLE = 4
};
struct fhk_einfo {
 int err;
 struct fhk_model *model;
 struct fhk_var *var;
};
typedef struct fhk_graph fhk_graph;
typedef int (*fhk_model_exec)(fhk_graph *G, void *udata, union pvalue *ret, union pvalue *args);
typedef int (*fhk_var_resolve)(fhk_graph *G, void *udata, union pvalue *value);
typedef const char *(*fhk_desc)(void *udata);
struct fhk_graph {
 fhk_model_exec model_exec;
 fhk_var_resolve resolve_virtual;
 fhk_desc debug_desc_var;
 fhk_desc debug_desc_model;
 size_t n_var;
 size_t n_mod;
 struct fhk_vbmap *v_bitmaps;
 struct fhk_mbmap *m_bitmaps;
 struct fhk_einfo last_error;
 void *udata;
};
void fhk_graph_init(struct fhk_graph *G);
void fhk_graph_destroy(struct fhk_graph *G);
void fhk_set_given(struct fhk_graph *G, struct fhk_var *x);
void fhk_set_solve(struct fhk_graph *G, struct fhk_var *y);
void fhk_reset(struct fhk_graph *G, int what);
int fhk_solve(struct fhk_graph *G, struct fhk_var *y);
       
       
typedef int (*ex_exec_f)(void *, union pvalue *ret, union pvalue *argv);
typedef struct ex_info {
 ex_exec_f exec;
} ex_info;
typedef struct ex_R_info ex_R_info;
ex_R_info *ex_R_create(const char *fname, const char *func,
  int narg, enum ptype *argt, int nret, enum ptype *rett);
int ex_R_exec(ex_R_info *X, union pvalue *ret, union pvalue *argv);
void ex_R_destroy(ex_R_info *X);
struct fhk_model_meta {
 const char *name;
 ex_info *ei;
};
]]
