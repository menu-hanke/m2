CC = gcc
CCOPT = -O3 -flto -fopenmp -ffast-math -fno-finite-math-only -march=native
CCDEBUG = -DNDEBUG
CCDEF =
CCWARN = -Wall -Wextra
XCFLAGS = 
XLDFLAGS = 

EXEC_LANG = 

LUAJIT_INCLUDE = -isystem /usr/include/luajit-2.0
LUAJIT_LIB = -lluajit-5.1

R_INCLUDE = -isystem /usr/include/R
R_LIB = -L/usr/lib/R/lib -lR

M2_EXECUTABLE = m2
LUA_FFI_API = lua/m2_cdef.lua
LUA_EXPORTS = lua_exports.h

default: $(M2_EXECUTABLE)

profile: CCOPT += -g3 -pg
profile: default

debug: CCOPT = -g3 -fopenmp
debug: CCDEBUG = -DDEBUG
debug: default

M2_O = main.o bitmap.o fhk_graph.o fhk_solve.o lex.o arena.o sim.o grid.o save.o update.o vmath.o\
	   world.o

# TODO: test these features from EXEC_LANG
# R support
M2_O += exec_R.o
CCDEF += -DM2_EXEC_R
XCFLAGS += $(R_INCLUDE)
XLDFLAGS += $(R_LIB)

M2_C = $(M2_O:.o=.c)

CFLAGS = $(LUAJIT_INCLUDE) $(CCOPT) $(CCDEBUG) $(CCDEF) $(CCWARN) $(XCFLAGS)
# -rdynamic is needed to access C symbols of the executable from lua
# ffi.C uses dlsym(RTLD_DEFAULT, ...)
LDFLAGS = -rdynamic $(LUAJIT_LIB) $(CCOPT) $(CCDEBUG) $(XLDFLAGS)

dep: $(M2_C) $(LUA_EXPORTS)
	$(CC) $(CFLAGS) -MM $(M2_C) > Makefile.dep
	$(CC) $(CFLAGS) -MM -MT $(LUA_FFI_API) $(LUA_EXPORTS) >> Makefile.dep

# XXX: this is a turbo hacky way to do it
# for whatever reason this is really fragile, it breaks if
#     * -g3 is set
#     * any -I option is given
ffi $(LUA_FFI_API): $(LUA_EXPORTS)
	echo "-- Autogenerated file - don't touch" > $(LUA_FFI_API)
	echo "local ffi = require 'ffi'" >> $(LUA_FFI_API)
	echo "ffi.cdef [[" >> $(LUA_FFI_API)
	$(CC) $(CCDEF) $(CCDEBUG) -P -E -nostdinc -DEXPORT_LUA_CDEF $(LUA_EXPORTS) 2>/dev/null\
		| sed -r 's/@@remove@@\s*(;?)//'\
		>> $(LUA_FFI_API)\
		| true
	echo "]]" >> $(LUA_FFI_API)

clean:
	$(RM) $(M2_O) $(M2_EXECUTABLE) $(LUA_FFI_API)

.PHONY: ffi dep clean

include Makefile.dep

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

$(M2_EXECUTABLE): $(M2_O) $(LUA_FFI_API)
	$(CC) $(LDFLAGS) $(M2_O) -o $@
